y = age, fill = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
y_flip()
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
y_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
# calculate age
today_date <- today(tzone = "UCT")
dataset_other <- dataset_other %>%
mutate(age = as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.25)
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = age, color = party) +
geom_line(stat = "density") +
labs(title = "Age Distribution of House Representatives",
caption = "Note: Density constructed on party basis, does not imply relative house representation across parties.",
x = "Age",
y = "Density") +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("blue", "red", "green"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party, ann = FALSE) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party, ann = TRUE) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party, names = FALSE) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party, xlab = mklab(y_var = horizontal)) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party, xlab = "mklab(y_var = horizontal)") +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, fill = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, color = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "dark red", "yellow"))
ggplot(dataset_other) +
aes(x = party,
y = age, color = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Are Democrats or Republican's Older?",
subtitle = "Based on age distribution of house representatives",
x = "Political Party",
y = "Age") +
coord_flip() +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "red", "green"))
# YOUR CODE HERE
theme_set(theme_minimal())
# c - top 10 representatives according to average daily page views
top10 <- dataset[order(-dataset$traffic),][1:10,]
top10 %>%
mutate(name = reorder(name, traffic)) %>%
ggplot(aes(x = name, y = traffic, fill = party)) +
geom_bar(stat = "identity") +
labs(title ="Top 10 Most Wikipedia'ed Representatives",
x = "Representative",
y = "Avg. Daily Wikipedia Page Views") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican"),
values = c("blue", "red"))
# pool residual variables
dataset_other <- dataset %>%
mutate(party = replace(party, party == "Independent", "O")) %>%
mutate(party = replace(party, party == "PNP/R", "O")) %>%
mutate(party = replace(party, party == "DFL", "O"))
# d - log mean page views vs. the number of sessions served
# limited to democratic & republican party representatives
ggplot(dataset_other) +
aes(x = traffic,
y = session_count,
color = party) +
scale_x_log10() +
geom_point() +
labs(title = "Representatives' Wiki Page Traffic vs. Session Tenure",
subtitle = "Covers the 115 House Session, Democrats & Republicans",
x = "Avg. daily Wikipedia page views (logged scale)",
y = "House sessions served") +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("blue", "red", "green"))
# ggplot(subset(dataset_other, party == c("D", "D ", "R", "R "))) +
#        aes(x = log(traffic),
#            y = session_count,
#            color = party) +
#   geom_point() +
#   labs(title = "Representatives' Wiki Page Traffic vs. Session Tenure",
#        subtitle = "Covers the 115 House Session, Democrats & Republicans",
#        x = "Log avg. daily Wikipedia page views (log10)",
#        y = "House sessions served") +
#   scale_color_manual(name = "Political Party",
#                      labels = c("Democrat", "Republican", "Other"),
#                      values = c("blue", "red", "green"))
# YOUR CODE HERE
theme_set(theme_minimal())
# c - top 10 representatives according to average daily page views
top10 <- dataset[order(-dataset$traffic),][1:10,]
top10 %>%
mutate(name = reorder(name, traffic)) %>%
ggplot(aes(x = name, y = traffic, fill = party)) +
geom_bar(stat = "identity") +
labs(title ="Top 10 Most Wikipedia'ed Representatives",
x = "Representative",
y = "Avg. Daily Wikipedia Page Views") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican"),
values = c("blue", "red"))
# pool residual variables
dataset_other <- dataset %>%
mutate(party = replace(party, party == "Independent", "Z")) %>%
mutate(party = replace(party, party == "PNP/R", "Z")) %>%
mutate(party = replace(party, party == "DFL", "Z"))
# d - log mean page views vs. the number of sessions served
# limited to democratic & republican party representatives
ggplot(dataset_other) +
aes(x = traffic,
y = session_count,
color = party) +
scale_x_log10() +
geom_point() +
labs(title = "Representatives' Wiki Page Traffic vs. Session Tenure",
subtitle = "Covers the 115 House Session, Democrats & Republicans",
x = "Avg. daily Wikipedia page views (logged scale)",
y = "House sessions served") +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("blue", "red", "green"))
# ggplot(subset(dataset_other, party == c("D", "D ", "R", "R "))) +
#        aes(x = log(traffic),
#            y = session_count,
#            color = party) +
#   geom_point() +
#   labs(title = "Representatives' Wiki Page Traffic vs. Session Tenure",
#        subtitle = "Covers the 115 House Session, Democrats & Republicans",
#        x = "Log avg. daily Wikipedia page views (log10)",
#        y = "House sessions served") +
#   scale_color_manual(name = "Political Party",
#                      labels = c("Democrat", "Republican", "Other"),
#                      values = c("blue", "red", "green"))
library(tidyverse)
library(lubridate)
library(legislatoR)
library(broom)
#library(kableExtra) # optional (see part 3)
library(tidyverse)
library(lubridate)
library(legislatoR)
library(broom)
#library(kableExtra) # optional (see part 3)
# a
demographics <- get_core(legislature = "usa_house")
house_115 <- get_political(legislature = "usa_house") %>%
filter(session == 115)
merge1 <- right_join(demographics, house_115, by = "pageid")
# b
traffic_avg <- get_traffic(legislature = "usa_house") %>%
filter(date >= "2017-01-03" & date <= "2019-01-03") %>%
group_by(pageid) %>%
summarise_at(vars(traffic), mean, na.rm = TRUE)
merge2 <- left_join(merge1, traffic_avg, by = "pageid")
# c
house_sessions <- get_political(legislature = "usa_house") %>%
dplyr::count(pageid, sort = TRUE, name = "session_count")
# combine into final dataset
dataset <- left_join(merge2, house_sessions, by = "pageid")
theme_set(theme_minimal())
# c - top 10 representatives according to average daily page views
top10 <- dataset[order(-dataset$traffic),][1:10,]
top10 %>%
mutate(name = reorder(name, traffic)) %>%
ggplot(aes(x = name, y = traffic, fill = party)) +
geom_bar(stat = "identity") +
labs(title ="Top 10 Most Wikipedia'ed Representatives",
subtitle = "Covers the 115th House Session",
x = "Representative",
y = "Avg. Daily Wikipedia Page Views") +
coord_flip() +
scale_fill_manual(name = "Political Party",
labels = c("Democrat", "Republican"),
values = c("blue", "red"))
# pool residual variables
dataset_other <- dataset %>%
mutate(party = replace(party, party == "Independent", "Z")) %>%
mutate(party = replace(party, party == "PNP/R", "Z")) %>%
mutate(party = replace(party, party == "DFL", "Z"))
# d - log mean page views vs. the number of sessions served
# note: one could also use "log(traffic)", but I think the logged scale
# (rather than logged variable) provides more understandable information
ggplot(dataset_other) +
aes(x = traffic,
y = session_count,
color = party) +
scale_x_log10() +
geom_point() +
labs(title = "Representatives' Wiki Page Traffic vs. Session Tenure",
subtitle = "Covers the 115th House Session",
x = "Avg. daily Wikipedia page views (logged scale)",
y = "House sessions served") +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("blue", "red", "green"))
# two age plots - both have pro's and con's
# calculate age
today_date <- today(tzone = "UCT")
dataset_other <- dataset_other %>%
mutate(age = as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.25)
# boxplot
ggplot(dataset_other) +
aes(x = party,
y = age, color = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Age Distribution of House Representatives (Boxplot)",
subtitle = "Covers the 115th House Session",
x = "Political Party",
y = "Age") +
theme(axis.text.y = element_blank()) +
coord_flip() +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "red", "dark gray"))
# density plot
ggplot(dataset_other) +
aes(x = age, color = party) +
geom_line(stat = "density") +
labs(title = "Age Distribution of House Representatives (Density Plot)",
subtitle = "Covers the 115th House Session",
caption = "Note: Density constructed on party basis and does not imply relative house representation across parties.",
x = "Age",
y = "Density") +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("blue", "red", "green"))
# YOUR CODE HERE
# create dummy variable for key position and ethnicity (white: T or F)
dataset_other <- dataset_other %>%
mutate(key_pos = (dataset_other[, 20] | dataset_other[, 40] | dataset_other[, 41])) %>%
mutate(white = ifelse(.$ethnicity == "white", TRUE, FALSE))
# linear model
housemod <- lm(log(traffic) ~ key_pos + session_count + party + white + age + sex, data = dataset_other)
# summary table
summary(housemod)
df_housemod <- tidy(housemod)
# for a neater plot (but with less information):
# kable(df_housemod)
df_housemod %>%
dplyr::filter(term != "(Intercept)") %>%
ggplot(aes(x = term, y = estimate)) +
geom_hline(yintercept = 0, color = "grey") +
geom_point() +
geom_linerange(aes(ymin = estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
geom_linerange(aes(ymin = estimate - 1.65*std.error, ymax = estimate + 1.65*std.error),
size = 0.8) +
coord_flip() +
labs(x = "",
y = "OLS coefficient with 90% and 95% CIs",
title = "Model Coefficient Plot",
caption = "Note: Z refers to non-Dem. or Repub. party member")
x <- c(-5:5, NA)
x
dataset_other <- dataset_other %>%
mutate(age = if_else(death != "NA", (as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15), NA)) %>%
mutate(age = as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.25)
dataset_other <- dataset_other %>%
mutate(age = if_else(death != "NA", (as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15), NA))
dataset_other <- dataset_other %>%
dataset_other <- dataset_other %>%
mutate(age = if_else(death != "NA", "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = if_else(death =! "NA", "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = if_else(death == "NA", "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = dplyr::if_else(death == "NA", "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death == "NA", "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = as.Numeric(ifelse(death == "NA", "dead", "alive")))
dataset_other <- dataset_other %>%
mutate(age = as.numeric(ifelse(death == "NA", "dead", "alive")))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death == "NA", "alive"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death == "NA", 5))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death=="NA", 5))
dataset_other <- dataset_other %>%
mutate(age = ifelse(session==115, 5))
View(dataset_other)
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, 5))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, 5, "NA"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, 5, (as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15) ))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE,
(as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15),
(as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.15) ))
View(dataset_other)
# calculate current age
today_date <- today(tzone = "UCT")
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE,
(as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15),
(as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.15) ))
View(dataset_other)
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, "dead", "alive")
(as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15),
(as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.15) ))
dataset_other <- dataset_other %>%
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==TRUE, "dead", "alive"))
View(dataset_other)
dataset_other <- dataset_other %>%
mutate(age = ifelse(death==FALSE, "dead", "alive"))
View(dataset_other)
dataset_other <- dataset_other %>%
mutate(age = ifelse(death, "dead", "alive"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(is.na(death), "dead", "alive"))
View(dataset_other)
dataset_other <- dataset_other %>%
mutate(age = ifelse(is.na(death), "alive", "dead"))
dataset_other <- dataset_other %>%
mutate(age = ifelse(is.na(death),
(as.numeric(difftime(today_date, as.Date(birth), units = "days")) / 365.15),
(as.numeric(difftime(as.Date(death), as.Date(birth), units = "days")) / 365.15)))
View(dataset_other)
# boxplot
ggplot(dataset_other) +
aes(x = party,
y = age, color = party) +
geom_boxplot(alpha = 0.3) +
labs(title = "Age Distribution of House Representatives (Boxplot)",
subtitle = "Covers the 115th House Session",
x = "Political Party",
y = "Age") +
theme(axis.text.y = element_blank()) +
coord_flip() +
scale_color_manual(name = "Political Party",
labels = c("Democrat", "Republican", "Other"),
values = c("dark blue", "red", "dark gray"))
# YOUR CODE HERE
# create dummy variable for key position and ethnicity (white: T or F)
dataset_other <- dataset_other %>%
mutate(key_pos = (dataset_other[, 20] | dataset_other[, 40] | dataset_other[, 41])) %>%
mutate(white = ifelse(.$ethnicity == "white", TRUE, FALSE))
# linear model
housemod <- lm(log(traffic) ~ key_pos + session_count + party + white + age + sex, data = dataset_other)
# summary table
summary(housemod)
df_housemod <- tidy(housemod)
# for a neater plot (but with less information):
# kable(df_housemod)
df_housemod %>%
dplyr::filter(term != "(Intercept)") %>%
ggplot(aes(x = term, y = estimate)) +
geom_hline(yintercept = 0, color = "grey") +
geom_point() +
geom_linerange(aes(ymin = estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
geom_linerange(aes(ymin = estimate - 1.65*std.error, ymax = estimate + 1.65*std.error),
size = 0.8) +
coord_flip() +
labs(x = "",
y = "OLS coefficient with 90% and 95% CIs",
title = "Model Coefficient Plot",
caption = "Note: Z refers to non-Dem. or Repub. party member")
knitr::opts_chunk$set(collapse = TRUE, comment = NA)
library(tidyverse)
library(quanteda)
library(quanteda.textmodels)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(readtext) # for getting document and their info into a data frame
COURSE <- "~iqmr" # where we keep all the course data
# similar method: http://varianceexplained.org/r/trump-tweets/
# make new four colum data frame with title, text, year, and jurisdiction
docinfo <- c("year", "jurisdiction")
leg_all <- readtext("text_leg/",
docvarsfrom = "filenames",
docvarnames = docinfo)
setwd("~/Desktop/IASS/Comp_Leg/airlegislation")
# make new four colum data frame with title, text, year, and jurisdiction
docinfo <- c("year", "jurisdiction")
leg_all <- readtext("text_leg/",
docvarsfrom = "filenames",
docvarnames = docinfo)
# make new four colum data frame with title, text, year, and jurisdiction
docinfo <- c("year", "jurisdiction")
leg_all <- readtext("text_leg",
docvarsfrom = "filenames",
docvarnames = docinfo)
setwd("~/Desktop/IASS/Comp_Leg/airlegislation")
# make new four colum data frame with title, text, year, and jurisdiction
docinfo <- c("year", "jurisdiction")
leg_all <- readtext("text_leg/",
docvarsfrom = "filenames",
docvarnames = docinfo)
